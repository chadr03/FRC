// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc252.EasyDrive.subsystems;




import org.usfirst.frc252.EasyDrive.*;
import org.usfirst.frc252.EasyDrive.commands.*;

import com.ctre.phoenix.sensors.PigeonIMU;
import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.SensorTerm;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.can.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;



/**
 *
 */
public class DriveTrain extends Subsystem{


    private final WPI_TalonSRX rightMotor = new WPI_TalonSRX(1);
    private final WPI_TalonSRX leftMotor = new WPI_TalonSRX(2);
    //private final SpeedController leftMotor = RobotMap.driveTrainLeftMotor;
    public final DifferentialDrive differentialDrive1 = new DifferentialDrive(leftMotor, rightMotor);
    
    private AnalogInput pixyX = new AnalogInput(1);
    private DigitalInput pixyTarget = new DigitalInput(1);
    
   
    WPI_TalonSRX spareTalon = new WPI_TalonSRX(3);
    PigeonIMU imu = new PigeonIMU(spareTalon);
    
    
    
    
    double targetAngle;
	double turnThrottle;
	
	double currentAngle;
	double currentAngularRate;
	double kAngleSetpoint = 0;
	double kPstraightGyro = 1;
	
	
	//private final double source =
    

	

	
    @Override
    public void initDefaultCommand() {
      

        setDefaultCommand(new NormalDrive());
		leftMotor.setSensorPhase(true);
		leftMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
		leftMotor.configSelectedFeedbackCoefficient(	1.0, 						// Coefficient
				Constants.PID_PRIMARY,		// PID Slot of Source 
				Constants.kTimeoutMs);		// Configuration Timeout
		rightMotor.configSelectedFeedbackCoefficient(	1.0, 						// Coefficient
				Constants.PID_PRIMARY,		// PID Slot of Source 
				Constants.kTimeoutMs);		// Configuration Timeout
		
		rightMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        leftMotor.setSafetyEnabled(false);
        rightMotor.setSafetyEnabled(false);
        leftMotor.configPulseWidthPeriod_EdgesPerRot(1, 10);
        rightMotor.configPulseWidthPeriod_EdgesPerRot(1,10);

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void drive(double forward, double twist) {
    	//differentialDrive1.tankDrive(left, right);
    	differentialDrive1.arcadeDrive(forward, .5*twist, true);
    	
    	
    	
	}
    
    public void tank(double left, double right) {
    	differentialDrive1.tankDrive(left, right, true);
    }
    public void tankEasyDrive(double left, double right) {
    	double maxSpeed=0.5;
    	if (left<=0) {
    		left=Math.max(-1*maxSpeed, left);
    	}
    	else {
    		left=Math.min(maxSpeed, left);
    	}
    	if (right<=0) {
    		right=Math.max(-1*maxSpeed, right);
    	}
    	else {
    		right=Math.min(maxSpeed, right);
    	}
    	
    	
    	differentialDrive1.tankDrive(-left, -right);//-left,-right
    }

    
    
	/**
	 * Tank style driving for the DriveTrain.
	 *
	 * @param joy The ps3 style joystick to use to drive tank style.
	 */
	public void drive(Joystick joy) {
		drive(-joy.getY(), joy.getTwist());
	
	}
    
	public double[] gyroInfo(){
		double [] ypr = new double[3];
		imu.getYawPitchRoll(ypr);
		double yaw=ypr[0];
		double pitch=ypr[1];
		double roll=ypr[2];
		return ypr;

	}
	
	public double getHeading() {
		double[] ypr_deg = new double[3];
		imu.getYawPitchRoll(ypr_deg);
		return ypr_deg[0];
	}
	
	public double getAngle() {
		double angle = getHeading() % 360;
		if(angle<0) {
			angle=360.0 + angle;
		}
		return 360-angle; //360-angle
	}
	
	public double getYawRate() {
		double[] xyz_dps = new double[3];
		imu.getRawGyro(xyz_dps);
		return xyz_dps[0];
	}
	
		
	public void zeroGyro() {
		imu.setYaw(0, 0);
		imu.setAccumZAngle(0, 0);
		imu.setFusedHeading(0, 0);
		System.out.println("Gyro Zeroed");
	}
	
	public void zeroSensors() {
		leftMotor.getSensorCollection().setQuadraturePosition(0, Constants.kTimeoutMs);
		//leftMotor.setSensorPhase(true);
		rightMotor.getSensorCollection().setQuadraturePosition(0, Constants.kTimeoutMs);
		imu.setYaw(0, 0);
		imu.setAccumZAngle(0, 0);
		imu.setFusedHeading(0, 0);
		System.out.println("Sensors Zeroed");
	}
	public void zeroEncoders() {
		leftMotor.getSensorCollection().setQuadraturePosition(0, Constants.kTimeoutMs);
		//leftMotor.setSensorPhase(true);
		rightMotor.getSensorCollection().setQuadraturePosition(0, Constants.kTimeoutMs);
		
	}
	
    public double getDashboardTurn() {
		
		return SmartDashboard.getNumber("Turn Angle Setpoint",0.0);
		
	}

	
	
	public double getLeftVelocity() {
		double velocity = this.leftMotor.getSelectedSensorVelocity(0);
		return velocity;
	}
	
	public double getRightVelocity() {
		double velocity = this.rightMotor.getSelectedSensorVelocity(0);
		return velocity;
	}
	
	
	public int getLeftPosition() {
		int position = this.leftMotor.getSelectedSensorPosition(0);
		return position;
	}
	
	public int getRightPosition() {
		int position = this.rightMotor.getSelectedSensorPosition(0);
		return position;
	}
	
	public double getLeftPositionInch() {
		return Math.PI*RobotMap.WHEEL_DIA*getLeftPosition()/RobotMap.ENCODER_CLICK_PER_REV;
	}
	
	public double getRightPositionInch() {
		return Math.PI*RobotMap.WHEEL_DIA*getRightPosition()/RobotMap.ENCODER_CLICK_PER_REV;
	}
	
	public double getAvgPositionInch() {
		return (getLeftPosition()+getRightPosition())/2;
	}
	
	public void driveStraightGyro(double power, double kP) {
	    double turningValue = (kAngleSetpoint - getHeading()) * -kP;
	    // Invert the direction of the turn if we are going backwards
	    //turningValue = Math.copySign(turningValue, power);
	    //if (power<0) {
	    //	turningValue=-1*turningValue;
	    //}
	    SmartDashboard.putNumber("TurningValue", turningValue);
	    drive(power, turningValue);
	}
	
	public String getGameData() {
		String gameData = DriverStation.getInstance().getGameSpecificMessage();
		return gameData;
	}
	
	public double getPixyX() {
		return pixyX.getVoltage();
	}
	
	public boolean getPixyTarget() {
		return pixyTarget.get();
	}
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	
	

}

